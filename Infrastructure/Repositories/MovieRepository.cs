using ApplicationCore.Contracts.Repositories;
using ApplicationCore.Entities;
using Infrastructure.Data;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;

namespace Infrastructure.Repositories
{
    public class MovieRepository : Repository<Movie>, IMovieRepository
    {
        public MovieRepository(MovieShopDbContext dbContext) : base(dbContext)
        {
        }

        public async Task<IEnumerable<Movie>> Get30HighestGrossingMovies()
        {
            // LINQ query 
            // SELECT top 30 * from Movie order by revenue 
            // Always check the SQL Query generated by EF, to make sure its the one you want and properly optimized

            var movies = await _dbContext.Movies.OrderByDescending(m => m.Revenue).Take(30).ToListAsync();
            return movies;

        }

        public async Task<IEnumerable<Movie>> Get30HighestRatedMovies()
        {
            var movies = await _dbContext.Reviews.Include(m => m.Movie)
                                                 .GroupBy(r => new { id = r.MovieId, r.Movie.PosterUrl, r.Movie.Title, r.Movie.ReleaseDate })
                                                 .OrderByDescending(g => g.Average(m => m.Rating))
                                                 .Select(m => new Movie
                                                 {
                                                     Id = m.Key.id,
                                                     PosterUrl = m.Key.PosterUrl,
                                                     Title = m.Key.Title,
                                                     ReleaseDate = m.Key.ReleaseDate

                                                 }).Take(30).ToListAsync();

            return movies;
        }

        public override Task<Movie> GetById(int id)
        {
            // Include method to include the navigation properties
            // Add Cast and MovieCast to the includes to get cast information
            var movie = _dbContext.Movies.Include(m => m.GenresOfMovie).ThenInclude(m => m.Genre).Include(m => m.Trailers).Include(m => m.Trailers).Include(m => m.CastsOfMovie).ThenInclude(m => m.Cast)
                    .FirstOrDefaultAsync(m => m.Id == id);
            // use review dbset (table) to get average rating of the movie and assign it to movie.Rating

            return movie;
        }

        public Task<Movie> GetMoviebyTitle(string title)
        {
            var movie = _dbContext.Movies.Include(m => m.GenresOfMovie).ThenInclude(m => m.Genre).Include(m => m.Trailers).Include(m => m.Trailers).Include(m => m.CastsOfMovie).ThenInclude(m => m.Cast)
                    .FirstOrDefaultAsync(m => m.Title == title);
            // use review dbset (table) to get average rating of the movie and assign it to movie.Rating

            return movie;
        }
    }
}